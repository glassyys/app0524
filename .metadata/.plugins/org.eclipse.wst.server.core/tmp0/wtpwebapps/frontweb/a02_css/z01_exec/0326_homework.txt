#### 과제 1: CSS 복합적 셀렉터의 특징과 한계
- **주제**: CSS 복합적 셀렉터들의 특징과 한계에 대해 토론하세요. 
특히, 각각의 복합적 셀렉터의 특징과 조합을 정리해보고, 
어떤 처리가 각 필요한 상황에 따라 처리되는지 토론해보자.

■복합셀렉터 종류
 1. 상속
    :html 계층구조에서 특정 속성들이 부모요소로부터 자식요소로 전달
   1) 특징 
    - 프로그래밍에서의 상속은 상위 객체와 하위 객체의 관계형 구조를 의미.
    - 상속은 부모 요소의 속성을 자식 요소가 물려받는 것을 의미. 
    - 상속을 이용하면 코드의 중복성을 줄여주기 때문에 생산성을 높일 수 있음.
    - 유지보수가 용이하다.
   2) 필요한 상황
    - 표준이 변경될때 일괄 변경처리 필요할 때
 
 2. 셀렉터 조합
    :html 요소들의 상속 구조 관계에서 원하는 요소를 선택하기 위해 셀렉터를 결합하는 것
    ■선택자 조합의 한계
    잘못된 조합을 사용하면 원하는 결과를 도출할수 없다.

   2-1) 후손선택자(Selector A Selector B)
      - A 요소 아래에 있는 모든 B 요소가 해당.
      - B 는 A 아래에 있는 다른 요소의 자식이어도 됨.
   2-2) 자식선택자(Selector A > Selector B) 
      - Selector A의 직접적인 자식(Child)인 Selector B를 선택.
      - A 요소 아래에 있는 모든 B를 선택하되 B가 다른 요소의 자식이면 안됨.

 3. 가상셀렉터
   3-1) 가상클래스 :선택된 요소의 특정 상태에 동작하는 셀렉터 
        ex) 하이퍼링크에서 마우스가 링크에 올라 갔을때 혹은, 체크박스에서 선택이 되었을때
               (':hover', `:nth-child()`)
   3-2) 가상엘리먼트 : 선택된 요소의 특정 위치에 동작하는 셀렉터 
        ex) 특정 요소의 앞,뒤,첫 글자,첫 줄 등에 동작하는 스타일을 지정
               (`:first-letter')

■복합선택자 한계
1. 복합적 선택자를 과도하게 사용하면 CSS 코드가 복잡해질 수 있습니다.
2. html의 구조변경에 따라 CSS코드를 수정하는 경우가 생겨 보수가 어려울 수 있습니다.
3. 여러가지를 조합하다 보면 원하는 결과가 나올지 않을수 있습니다.

#### 과제 2: CSS 가상 클래스의 활용법
- **주제**: CSS의 가상 클래스를 활용하는 다양한 방법에 대해 토론하세요.
특히, `:hover`, `:first-letter`, `:nth-child()` 등의
가상 클래스를 실제 프로젝트에서 어떻게 활용할 수 있는지 사례를 공유하세요.
답변:
1) 시각적인 장치를 활용해서 사용자 웹페이지를 쉽게 접근하고 사용할수 있습다.
2) 데이터베이스 표로 확인할때 사용자가 보기 쉽게 표현할 수 있습니다.
3) 하이퍼 링크의 경우는 한번 열어본 페이지를 사용자가 인지할 수 있습니다.
4) 개념 설명에 대해서 가상클래스를 이용해 주제별로 보기쉽게 구현할 수 있습니다.


-----------------------
[참고자료]
■ CSS 복합적 선택자의 한계
CSS의 복합적 선택자들은 매우 유용하지만, 몇 가지 한계가 있습니다.
이러한 한계들은 선택자의 복잡성,
스타일의 유지보수, 그리고 웹 페이지의 성능에 영향을 미칠 수 있습니다.

1. 복잡성: 복합적 선택자를 과도하게 사용하면 CSS 코드가 복잡해질 수 있습니다.
특히 중첩된 요소들에 대해 많은 복합적 선택자를 사용하는 경우,
코드의 가독성이 떨어지고 유지보수가 어려워질 수 있습니다.
2. 스타일의 유지보수: 복합적 선택자를 사용하여 스타일을 적용할 경우,
HTML 구조의 변경에 따라 CSS 코드를 수정해야 할 수 있습니다.
이는 유지보수를 어렵게 만들 수 있으며, CSS와 HTML 간의 의존성을 높일 수 있습니다.
3. 성능: 복합적 선택자는 브라우저가 스타일을 해석하는 데 시간이 걸릴 수 있습니다.
특히 후손 선택자( )를 사용할 때는 문서의 깊이에 따라 성능이 저하될 수 있습니다.
또한 복합적 선택자를 사용하면 브라우저가 렌더링하는 데 필요한 계산이 증가할 수 있습니다.
4. 의도하지 않은 스타일 적용: 복잡한 선택자를 사용할 경우,
의도하지 않은 요소에도 스타일이 적용될 수 있습니다.
이는 CSS의 우선순위 및 상속의 영향을 받을 수 있으며,
원하지 않는 스타일 충돌을 초래할 수 있습니다.
이러한 한계를 고려하여 CSS를 작성할 때는 복합적 선택자를 적절하게 사용하는 것이 중요합니다.
필요한 경우에만 사용하고, 가능한 한 단순하고 명확한 CSS를 유지하면 코드의 가독성과 유지보수성을
향상시킬 수 있습니다.



   3) 인접형제선택자(Selector A + Selector B)
      - A와 가장 인접한 형제 요소(Sibling) B에 속성 적용.
      - A와 B는 같은 부모 요소를 가지고 있어야 하며 여러 B 요소 중에서 A 에 가장 인접한 B만 선택됨.
   4) 일반형제 선택자(Selector A ~ Selector B)
      - A 요소의 형제인 모든 B를 선택.
      - A+B와 달리 A 이후에 오는 모든 B가 선택됨.
   