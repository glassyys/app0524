0416_유영선_토론
1. **보안 문제**: `eval()` 함수를 사용할 때 발생할 수 있는 보안 문제에 대해 토론하고, 
이를 방지하기 위한 대안은 무엇인지 논의하세요.
답변:
보안상 되도록 사용하지 말고 필요하면 직접코딩하거나 함수로 작성해서 사용하는 것을 권장합니다.

2. **성능 고려**: `setInterval`과 `setTimeout`의 성능에 대한 영향을 토론하고,
대규모 애플리케이션에서의 이들의 사용을 어떻게 최적화할 수 있는지 논의하세요.
답변:
setInterval과 setTimeout은 JavaScript에서 비동기적인 코드 실행을 가능하게 합니다. 
그러나 이들을 적절히 사용하지 않으면 성능 문제가 발생할 수 있습니다.
대규모 애플리케이션에서는 작업을 최적화하기 위해 주기적으로 실행되는 작업이 많은 경우 
setTimeout을 사용하여 작업 간 겹치지 않도록 하고, 
비동기 처리를 활용하여 메인 스레드의 부하를 줄이는 것이 좋습니다.
사용하지 않을때 제거를 꼭 해야 한다.

3. **JSON 사용법**: 웹 개발에서 JSON을 사용하는 이점에 대해 설명하고, XML과 비교하여 장단점을 토론하세요.
JSON은 간결해서 가독성이 좋고 크기가 작아 네트워크 대역폭을 절약할 수 있다.
그리고 JavaScript에서 사용하기 좋다.
답변:
장점)
JSON의 장점:

가독성 및 간결성: JSON은 간결하고 가독성이 좋아서 개발자가 쉽게 이해하고 작성할 수 있습니다.
데이터 크기: JSON은 XML에 비해 더 작은 크기를 가지므로 네트워크 대역폭을 절약할 수 있습니다.
JavaScript와의 호환성: JSON은 JavaScript와 밀접하게 관련되어 있으므로 JavaScript에서 쉽게 파싱하고 사용할 수 있습니다.
XML의 장점:

유효성 검사 및 스키마 지원: XML은 데이터의 유효성을 검사하고 스키마를 사용하여 데이터 구조를 정의할 수 있습니다. 이는 데이터의 일관성과 신뢰성을 유지하는 데 도움이 됩니다.
다양한 데이터 타입 지원: XML은 다양한 데이터 타입을 표현할 수 있으며, 데이터의 복잡한 구조를 나타내는 데 유용합니다.
호환성: 다양한 플랫폼과 언어에서 지원되므로 XML은 데이터의 호환성을 보장합니다.

단점)
JSON의 단점:
데이터 유효성 검사의 한계: JSON은 XML에 비해 유효성 검사 및 스키마 지원이 제한적입니다.
 따라서 데이터의 일관성을 보장하기 어려울 수 있습니다.
주석 지원 부족: JSON 형식은 주석을 지원하지 않습니다. 따라서 데이터에 설명을 추가하기가 어려울 수 있습니다.
이는 특히 문서화 및 읽기가 어려운 경우에 문제가 될 수 있습니다.

기능 부족: JSON은 XML에 비해 고급 기능을 제공하지 않습니다. 예를 들어, 
XML은 XSLT(Transformations), XPath(검색 및 쿼리), XQuery(데이터 검색 및 조작)와 같은 고급 기능을 제공합니다.

XML의 단점:
가독성: XML은 JSON에 비해 가독성이 떨어질 수 있습니다.
태그의 중복과 데이터의 크기가 증가하면 문서의 가독성이 저하될 수 있습니다.
데이터 크기: XML은 JSON에 비해 더 많은 용량을 차지하므로 네트워크 대역폭을 소비할 수 있습니다.
파싱의 복잡성: XML 파싱은 JSON에 비해 복잡할 수 있습니다.
따라서 XML을 파싱하고 처리하는 데 더 많은 자원이 필요할 수 있습니다.
JavaScript와의 호환성: 
XML은 JavaScript와 직접적으로 호환되지 않으므로 JavaScript에서 XML 
데이터를 다루는 것이 좀 더 번거로울 수 있습니다.
JSON과 XML 모두 데이터 교환 형식으로 널리 사용되지만, 각각의 단점도 있습니다.
